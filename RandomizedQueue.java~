import java.util.Random;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class RandomizedQueue<Item> implements Iterable<Item> {
   private int n;                           // size of queue
   private Node first;                      // first element of queque
   
   private class Node {                     // supporting class
       private Node next;                           // next item
       private Item item;                           // current item
   }
   
    /**
    * Initialize an empty RandomizedQueque.
    */
   
   public RandomizedQueue() {
       n = 0;
       first = null;
   }
   
   /**
    * Is this queque is empty?
    * @return true if queque is empty; false otherwise
    */
   
   public boolean isEmpty() {
       return n == 0;
   }
   
   /**
    * Returns the number of items in queue
    * @return the number of items in queue
    */
   
   public int size() {
       return n;
   }
   
   /**
    * Adds item in the queue
    * @param is item to add
    */ 
      
   public void enqueue(Item item) {
       if (item == null) { throw new NullPointerException(); }
       Node oldfirst = first;
       first = new Node();
       first.item = item;
       first.next = oldfirst;
       n++;
   
   
   }
   
   /**
    * Removes and returns a random item
    * @return a random item
    */
   
   public Item dequeue() {
       if (this.isEmpty()) throw new NoSuchElementException();
       final Random random = new Random();
       int a = random.nextInt(this.size());
       if (a == 0) { a++; }
       Node itemBuf = null;
       Node item = first;
       while (a != 0) {
           if (a == 1) { itemBuf = item; }
           item = item.next;
           a--;
       }
       
       if (this.size() != 1) { itemBuf.next = item.next; }
       n--;
       return item.item;

   }
   
   /**
    * Returns (but do not remove) a random item
    * @return (but do not remove) a random item
    */ 


   public Item sample() {
       if (this.isEmpty()) throw new NoSuchElementException();
       final Random random = new Random();
       int a = random.nextInt(this.size());
       Node item = first;
       while (a != 0) {
           item = item.next;
           a--;
       }
       return item.item;
   
   
   
   }                    
   
   
   /** 
    * Returns an independent iterator over items in random order
    * @return an independent iterator over items in random order
    */
   
   public Iterator<Item> iterator() {        // return an independent iterator over items in random order
       return new QueueIterator();
   }
       
   private class QueueIterator implements Iterator<Item> { 
        private Node current = first;
        public boolean hasNext()  { return current != null;                     }
        public void remove()      { throw new UnsupportedOperationException();  }

        public Item next() {
            if (!hasNext()) throw new NoSuchElementException();
            Item item = current.item;
            current = current.next; 
            return item;
        }
    }    
    
  public String toString() {
        StringBuilder s = new StringBuilder();
        for (Item item : this)
            s.append(item + " ");
        return s.toString();   
   }
  
   public static void main(String[] args) {
   
       RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>();
       

       rq.isEmpty();
       rq.size();
       rq.size();
       rq.enqueue(1);
       rq.dequeue();
       System.out.println(rq.toString()); 
       System.out.println(rq.size());
       System.out.println(rq.toString()); 
       System.out.println(rq.sample());
       System.out.println(rq.toString()); 
       System.out.println(rq.sample());
       System.out.println(rq.toString()); 
       System.out.println(rq.sample());
       System.out.println(rq.toString()); 
       System.out.println(rq.sample());
       System.out.println(rq.toString()); 
       rq.enqueue(45);
       System.out.println(rq.toString()); 
       System.out.println(rq.sample()); 
       System.out.println(rq.dequeue());
       
       System.out.println(rq.toString());                   
   
       
   }   // unit testing
}